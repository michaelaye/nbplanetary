# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/05_cassini_uvis.ipynb (unless otherwise specified).

__all__ = ['storage_root', 'UVISOpus']

# Cell
from .pds.opusapi import OPUS
from .utils import url_retrieve
from .config import config
from yarl import URL
from pathlib import Path
from pyuvis.io import EUV_PDS, FUV_PDS

# Cell
storage_root = config.storage_root / "cassini/uvis"
storage_root

# Cell
class UVISOpus:
    def __init__(self, pid):
        self.pid = pid
        self.query_pid(pid)

    def query_pid(self, pid):
        opus = OPUS()
        self.query_result = opus.query_image_id(pid)[0]
        self.id = self.query_result[0]
        self.dict = self.query_result[1]
        for k, v in self.dict.items():
            if isinstance(v, list) and len(v) == 1:
                setattr(self, k, v[0])
            else:
                setattr(self, k, v)

    @property
    def raw_data_url(self):
        return URL(self.couvis_raw[0])

    @property
    def raw_label_url(self):
        return URL(self.couvis_raw[1])

    @property
    def volume(self):
        return self.raw_data_url.parts[4]

    @property
    def local_folder(self):
        return storage_root / "/".join(self.raw_data_url.parts[4:7])

    @property
    def local_data_path(self):
        return self.local_folder / self.raw_data_url.name

    @property
    def local_label_path(self):
        return self.local_data_path.with_suffix(".LBL")

    def download(self, overwrite=False):
        self.local_data_path.parent.mkdir(parents=True, exist_ok=True)
        if self.local_data_path.exists() and not overwrite:
            print("File exists. Use `overwrite=True` to download fresh.")
            return
        url_retrieve(self.raw_data_url, self.local_data_path)
        url_retrieve(self.raw_label_url, self.local_label_path)

    def __repr__(self):
        s = f"Product ID:\n{self.id}\n\n"
        for k, v in self.query_result[1].items():
            s += f"Key: {k},\nValue(s):\n{v}\n\n"
        return s